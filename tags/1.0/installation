Full documentation available at: http://www.phphelium.com/docs

1. Basic installation

    Package dependencies:
        memcached
        php-pear
        php5-dev
        php-apc
        php5-memcache
        php5-curl
        apache2-dev

    PECL dependencies:
        pecl install apc
            (append php.ini with “extension=apc.so”)
        pecl install memcache
            (append php.ini with “extension=memcache.so”)

    Other:
        a2enmod rewrite

    Required settings changes (../settings.ini):
        [database]
            syntax: [SERVER];[DEFAULT_DB]@[USERNAME];[PASSWORD]
        [system]
            root: base directory
            src: root appended with /src/
        [server]
            uri: formatted base domain of website or service (e.g. phphelium.com)
        [memcache]
            serverList syntax: [SERVER1]@[PORT1];...[SERVERn]@[PORTn]

    VirtualHost rewrite conditions:

          RewriteCond %{REQUEST_URI} !^/phpmyadmin/
          RewriteCond %{REQUEST_URI} !^/css/
          RewriteCond %{REQUEST_URI} !^/js/
          RewriteCond %{REQUEST_URI} !^/images/
          RewriteRule . /index.php [L]


2. Setting up your first page or service

    Once the installation packages and configuration settings are built and a new virtual host has 	been constructed, the framework is ready to be used. To begin development, you must create 	your new primary controller, template file, and make your routing entry(s).

    To make a new page/service:
        1. Add a file to the [../src/controllers] directory, naming the file the same as the soon-to-be created class (naming e.g. Home.php – class Home...) and extending one of the following four master controllers, based on what the purpose and authentication requirements of the page/service are:
            1. StaticController: no authentication, basic page
            2. StandardController: basic page/service, requires simple login
            3. AdminController: requires admin level user account
            4. APIController: service to be accessed via REST and require API credentials

        2. Add a file to the [../src/templates] directory, naming the file the same as the class, lowercase and appended with “.tmp” (e.g. Home.php – home.tmp). This will represent your core template file.

        3. Add a directive to the routes.ini file in the root directory (or into the database table “pages” as specified by the model Pages) to handle requests based on the desired URI (and be sure the URI is unique):

            Routes.ini example entry:

                [home]
                uri = "/home/"
                title = "Home Page"
                class = "Home"
                directive = "init"
                secure = 0
                bypass = 1
                matching = 1
                cache = 0

        4. Modify your new controller file, added to the [../src/controllers] directory, with the following needed parameters:
            1. protected $class = '[CLASS_NAME]'
            2. protected $template = '[TEMPLATE_NAME]'
            3. public $cache = '[CLASS_CACHE_ALLOW]'
            4. private $errors = array();
            5. private $reqData = array();
            6. constructor:

                function __construct($merge=false) {
                    parent::__construct($merge);
                    $this->reqData = parent::getRequest();
                }

            7. required functions: action() and display()


Once complete, you are ready to begin development!