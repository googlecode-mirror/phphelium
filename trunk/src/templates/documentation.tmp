* ---------------------------------------------------------------------
* FILE: documentation.tmp
* This represents the content of one of the homepage containers
* ---------------------------------------------------------------------

<tmp:documentation>
Full documentation available at <a href="http://www.phphelium.com/docs">www.phphelium.com</a>

<div style="padding-top:1.5em; margin-top:1.5em; border-top:1px dotted silver;">
    <strong>1. Basic installation</strong>

    <div style="padding:1em 0 1.5em 3em;">
        <div style="padding:0 0 1em 0;">
            <u>Package dependencies:</u>
            <div style="padding:0.3em;">- memcached</div>
            <div style="padding:0.3em;">- php-pear</div>
            <div style="padding:0.3em;">- php5-dev</div>
            <div style="padding:0.3em;">- php-apc</div>
            <div style="padding:0.3em;">- php5-memcache</div>
            <div style="padding:0.3em;">- php5-curl</div>
            <div style="padding:0.3em;">- apache2-dev</div>
        </div>

        <div style="padding:0 0 1em 0;">
            <u>PECL dependencies:</u>
            <div style="padding:0.3em;">- pecl install apc <em>(append php.ini with "extension=apc.so")</em></div>
            <div style="padding:0.3em;">- pecl install memcache <em>(append php.ini with "extension=memcache.so")</em></div>
        </div>

        <div style="padding:0 0 1em 0;">
            <u>Other:</u>
            <div style="padding:0.3em;">- a2enmod rewrite</div>
        </div>

        <div style="padding:0 0 1em 0;">
            <u>Settings changes:</u> (../settings.ini)
            <div style="padding:0.3em;">- [database]
                <div style="padding:0.5em 0 0.5em 2em;">
                    syntax: [SERVER];[DEFAULT_DB]@[USERNAME];[PASSWORD]
                </div>
            </div>
            <div style="padding:0.3em;">- [system]
                <div style="padding:0.5em 0 0.2em 2em;">
                    root: base directory
                </div>
                <div style="padding:0.2em 0 0.5em 2em;">
                    src: root appended with /src/
                </div>
            </div>
            <div style="padding:0.3em;">- [server]
                <div style="padding:0.5em 0 0.5em 2em;">
                    uri: formatted base domain of website or service (e.g. phphelium.com)
                </div>
            </div>
            <div style="padding:0.3em;">- [memcache]
                <div style="padding:0.5em 0 0.5em 2em;">
                    serverList syntax: [SERVER1]@[PORT1];...[SERVERn]@[PORTn]
                </div>
            </div>
        </div>

        <div style="padding:0 0 1em 0;">
            <u>VirtualHost rewrite conditions:</u>
            <div style="padding:0.5em 0 0.5em 2em;">
                RewriteCond %{REQUEST_URI} !^/phpmyadmin/<br />
                RewriteCond %{REQUEST_URI} !^/css/<br />
                RewriteCond %{REQUEST_URI} !^/js/<br />
                RewriteCond %{REQUEST_URI} !^/images/<br />
                RewriteRule . /index.php [L]
            </div>
        </div>
    </div>

    <strong>2. Setting up your first page or service</strong>

    <div style="padding:1em 0 0.2em 3em;">
        <div style="padding:0 0 1em 0;">
            Once the installation packages and configuration settings are built and a new virtual host has
            been constructed, the framework is ready to be used. To begin development, you must create
            your new primary controller, template file, and make your routing entry(s).
        </div>

        <div style="padding:0 0 1em 0;">
            To make a new page/service:

            <div style="padding:1em 0.3em 0.3em 1em;">
                <strong>1.</strong> Add a file to the [../src/controllers] directory, naming the file the same as the soonto-be created class (naming e.g. Home.php = "class Home...") and extending one
                of the following four master controllers, based on what the purpose and
                authentication requirements of the page/service are:

                <div style="padding:1em 0.5em 0.5em 1em;">
                    <div style="padding:0.3em;">- StaticController: no authentication, basic page</div>
                    <div style="padding:0.3em;">- StandardController: basic page/service, requires simple login</div>
                    <div style="padding:0.3em;">- AdminController: requires admin level user account</div>
                    <div style="padding:0.3em;">- APIController: service to be accessed via REST and require API credentials</div>
                </div>
            </div>
            <div style="padding:2em 0.3em 0.3em 1em;">
                <strong>2.</strong> Add a file to the [../src/templates] directory, naming the file the same as the class,
                lowercase and appended with ".tmp" (e.g. Home.php = home.tmp). This will
                represent your core template file.
            </div>
            <div style="padding:2em 0.3em 0.3em 1em;">
                <strong>3.</strong> Add a directive to the routes.ini file in the root directory (or into the database table
                "pages" as specified by the model Pages) to handle requests based on the desired
                URI (and be sure the URI is unique):<br />
                <br />
                routes.ini example entry:

                <div style="padding:1em 0.5em 0.5em 2em;">
                    [home]<br />
                    uri = "/home/"<br />
                    title = "Home Page"<br />
                    class = "Home"<br />
                    directive = "init"<br />
                    secure = 0<br />
                    bypass = 1<br />
                    matching = 1<br />
                    cache = 0
                </div>
            </div>
            <div style="padding:2em 0.3em 0.3em 1em;">
                <strong>4.</strong> Modify your new controller file, added to the [../src/controllers] directory, with the
                following needed parameters:

                <div style="padding:0.5em 0.5em 0.5em 2em;">
                    <div style="padding:0.3em;">- protected $class = '[CLASS_NAME]'</div>
                    <div style="padding:0.3em;">- private $template = '[TEMPLATE_NAME]'</div>
                    <div style="padding:0.3em;">- private $errors = array();</div>
                    <div style="padding:0.3em;">- private $reqData = array();</div>
                    <div style="padding:0.3em;">- constructor:
                        <div style="padding:0.5em 0.5em 0.5em 1.5em;">
                        function __construct($merge=false) {<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($merge);<br />
                        }
                        </div>
                    </div>
                    <div style="padding:0.3em;">- required functions: action() and display()</div>
                </div>
            </div>
        </div>
    </div>

    <div style="padding:0.2em 0 0em 0em;">
        <strong>Once complete, you are ready to begin development!</strong>
    </div>
</div>
</tmp:documentation>